#!/usr/bin/env python3

import sys
import json
import logging
import argparse
import requests
import functools
from retry import retry
from pycbio.sys import fileOps
from pycbio.sys.objDict import ObjDict
from pycbio.tsv import TsvReader

debug = False

def parseArgs():
    usage = """
    Take output of catClustersToGenes and add GO ids.
    """
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('inClusterInfoTsv',
                        help="")
    parser.add_argument('outClusterInfoTsv',
                        help="")
    args = parser.parse_args()
    return args

def strArraySplit(commaStr):
    "parser for comma-separated string list into a list"
    if len(commaStr) == 0:
        return []
    return commaStr.split(",")

def strArrayJoin(strs):
    "formatter for a list into a comma separated string"
    return ",".join(strs)

def parseMonarchAssocs(assocs):
    goIds = set()
    for assoc in assocs.associations:
        objId = assoc.object.id
        if objId.startswith("GO:"):
            goIds.add(objId)
    return goIds

@retry(exceptions=(requests.exceptions.HTTPError,), tries=10, delay=10, backoff=2)
def queryMonarch(hgncId):
    resp = requests.get(f"https://api.monarchinitiative.org/api/bioentity/gene/{hgncId}/function")
    resp.raise_for_status()
    return resp.json(object_pairs_hook=ObjDict)

@functools.lru_cache(maxsize=None)
def lookupGoIdsForGene(hgncId):
    assocs = queryMonarch(hgncId)
    if debug:
        json.dump(assocs, sys.stderr, indent=4)
    goIds = parseMonarchAssocs(assocs)
    return frozenset(goIds)

def lookupGoIds(hgncIds):
    goIds = set()
    for hgncId in hgncIds:
        goIds |= lookupGoIdsForGene(hgncId)
    return goIds

def addGoIds(cluster, outClusterFh):
    fileOps.prRow(outClusterFh, cluster.getRow() + [strArrayJoin(sorted(lookupGoIds(cluster.hgncIds)))])

def catClustersAddGo(inClusterRd, outClusterFh):
    fileOps.prRow(outClusterFh, inClusterRd.columns + ["goId"])
    for cluster in inClusterRd:
        addGoIds(cluster, outClusterFh)

def main(args):
    logging.basicConfig()
    inClusterRd = TsvReader(args.inClusterInfoTsv, typeMap={"hgncIds": (strArraySplit, strArrayJoin)})
    with open(args.outClusterInfoTsv, "w") as outClusterFh:
        catClustersAddGo(inClusterRd, outClusterFh)

main(parseArgs())
