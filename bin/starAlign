#!/usr/bin/env python3

# use only standar python to allow kind folks to do alignments
import sys
import os
import argparse
import shlex
import shutil
import subprocess
import tempfile
import os.path as osp
from urllib.parse import urlparse
from abc import ABC, abstractmethod

def parseArgs():
    usage = """run an STAR alignment using ENCODE RNA-Seq protocol.
    Requires STAR and samtools programs """
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('--ncpus', type=int, default=4)
    parser.add_argument('--ramGB', type=int, default=16)
    parser.add_argument('--tmpDir',
                        help="override the TMPDIR environment variable")
    parser.add_argument('bamFile',
                        help="output BAM file")
    parser.add_argument('genomeDir',
                        help="STAR genome index dir")
    parser.add_argument('fastq1',
                        help="Path first FASTQ ")
    parser.add_argument('fastq2', nargs='?',
                        help="second FASTQ for pair-ends experiments")
    args = parser.parse_args()
    if args.tmpDir is not None:
        os.environ["TMPDIR"] = args.tmpDir
    return args

multiMapMax = 2048

# from https://raw.githubusercontent.com/ENCODE-DCC/rna-seq-pipeline/master/src/align.py
#  removed: --quantMode TranscriptomeSAM
#  added: outFileNamePrefix
#  change --outFilterMultimapNmax
#  check status of command
class StarAligner(ABC):
    """
    Abstract base class that gathers aspects common to both PE and SE
    Star aligning jobs.
    """

    def __init__(self, ncpus, ramGB, indexdir, outFileNamePrefix):
        self.ncpus = ncpus
        self.ramGB = ramGB
        self.indexdir = indexdir
        self.outFileNamePrefix = outFileNamePrefix

    def run(self):
        print(" ".join(self.command), file=sys.stderr)
        subprocess.check_call(self.command)

    @property
    @abstractmethod
    def command_string(self):
        pass

    @abstractmethod
    def format_command_string(self):
        pass


class SingleEndedStarAligner(StarAligner):

    command_string = """STAR --genomeDir {indexdir} \
    --readFilesIn {infastq} \
    --readFilesCommand zcat \
    --runThreadN {ncpus} \
    --genomeLoad NoSharedMemory \
    --outFilterMultimapNmax {multiMapMax} \
    --alignSJoverhangMin 8 \
    --alignSJDBoverhangMin 1 \
    --outFilterMismatchNmax 999 \
    --outFilterMismatchNoverReadLmax 0.04 \
    --alignIntronMin 20 \
    --alignIntronMax 1000000 \
    --alignMatesGapMax 1000000 \
    --outSAMheaderCommentFile COfile.txt \
    --outSAMheaderHD @HD VN:1.4 SO:coordinate \
    --outSAMunmapped Within \
    --outFilterType BySJout \
    --outSAMattributes NH HI AS NM MD \
    --outSAMstrandField intronMotif \
    --outSAMtype BAM SortedByCoordinate  \
    --sjdbScore 1 \
    --limitBAMsortRAM {ramGB}000000000
    --outFileNamePrefix {outFileNamePrefix}"""

    def __init__(self, fastqs, ncpus, ramGB, indexdir, outFileNamePrefix):
        super().__init__(ncpus, ramGB, indexdir, outFileNamePrefix)
        self.input_fastq = fastqs[0]
        self.command = shlex.split(
            self.format_command_string(type(self).command_string)
        )

    def format_command_string(self, input_string):
        cmd = input_string.format(
            infastq=self.input_fastq,
            ncpus=self.ncpus,
            ramGB=self.ramGB,
            indexdir=self.indexdir,
            outFileNamePrefix=self.outFileNamePrefix,
            multiMapMax=multiMapMax,
        )
        return cmd


class PairedEndStarAligner(StarAligner):

    command_string = """STAR --genomeDir {indexdir} \
    --readFilesIn {read1_fq_gz} {read2_fq_gz} \
    --readFilesCommand zcat \
    --runThreadN {ncpus} \
    --genomeLoad NoSharedMemory \
    --outFilterMultimapNmax {multiMapMax} \
    --alignSJoverhangMin 8 \
    --alignSJDBoverhangMin 1 \
    --outFilterMismatchNmax 999 \
    --outFilterMismatchNoverReadLmax 0.04 \
    --alignIntronMin 20 \
    --alignIntronMax 1000000 \
    --alignMatesGapMax 1000000 \
    --outSAMheaderCommentFile COfile.txt \
    --outSAMheaderHD @HD VN:1.4 SO:coordinate \
    --outSAMunmapped Within \
    --outFilterType BySJout \
    --outSAMattributes NH HI AS NM MD \
    --outSAMtype BAM SortedByCoordinate \
    --sjdbScore 1 \
    --limitBAMsortRAM {ramGB}000000000
    --outFileNamePrefix {outFileNamePrefix}"""

    def __init__(self, fastqs, ncpus, ramGB, indexdir, outFileNamePrefix):
        super().__init__(ncpus, ramGB, indexdir, outFileNamePrefix)
        self.fastq_read1 = fastqs[0]
        self.fastq_read2 = fastqs[1]
        self.command = shlex.split(self.format_command_string(type(self).command_string))

    def format_command_string(self, input_string):
        cmd = input_string.format(
            read1_fq_gz=self.fastq_read1,
            read2_fq_gz=self.fastq_read2,
            ncpus=self.ncpus,
            ramGB=self.ramGB,
            indexdir=self.indexdir,
            outFileNamePrefix=self.outFileNamePrefix,
            multiMapMax=multiMapMax
        )
        return cmd

def isUrl(spec):
    try:
        result = urlparse(spec)
        return all([result.scheme, result.netloc, result.path])
    except Exception:
        return False

def downloadStart(fastqUrl, tmpDir):
    fastq = osp.join(tmpDir, osp.basename(fastqUrl))
    proc = subprocess.Popen(["wget", "-nv", "-O", fastq, fastqUrl])
    return proc, fastq

def downloadWait(proc, fastqUrl):
    proc.wait()
    if proc.returncode != 0:
        raise Exception("download of {} failed".format(fastqUrl))

def getFastqs(fastq1Spec, fastq2Spec, tmpDir):
    """download fastqs in parallel if a URLs are specified"""
    fastq1 = fastq1Spec
    fastq2 = fastq2Spec
    proc1 = proc2 = None

    if isUrl(fastq1Spec):
        proc1, fastq1 = downloadStart(fastq1Spec, tmpDir)
    if (fastq2Spec is not None) and isUrl(fastq2Spec):
        proc2, fastq2 = downloadStart(fastq2Spec, tmpDir)

    if proc1 is not None:
        downloadWait(proc1, fastq1Spec)
    if proc2 is not None:
        downloadWait(proc2, fastq2Spec)

    return fastq1, fastq2

def mkTmpBam(bamFile):
    """create tmp BAM that can be atomically installed"""
    bamDir = osp.dirname(bamFile)
    if bamDir == "":
        bamDir = "."
    os.makedirs(bamDir, exist_ok=True)
    tmpFh = tempfile.NamedTemporaryFile(dir=bamDir, suffix=".bam", delete=False)
    tmpBam = tmpFh.name
    tmpFh.close()
    return tmpBam

def runAlignment(fastq1, fastq2, ncpus, ramGB, genomeDir, tmpDir, bamFile):
    if fastq2 is None:
        alignerCls = SingleEndedStarAligner
        filtCmd = ["samtools", "view", "-b", "-F", "4"]
    else:
        alignerCls = PairedEndStarAligner
        filtCmd = ["samtools", "view", "-b", "-f", "3"]

    aligner = alignerCls([fastq1, fastq2],
                         ncpus=ncpus, ramGB=ramGB,
                         indexdir=genomeDir,
                         outFileNamePrefix=osp.join(tmpDir, "out_"))
    aligner.run()

    with open(bamFile, "wb") as bamFh:
        subprocess.check_call(filtCmd + [osp.join(tmpDir, "out_Aligned.sortedByCoord.out.bam")],
                              stdout=bamFh)

def starAlign(fastq1Spec, fastq2Spec, ncpus, ramGB, genomeDir, bamFile):
    tmpDir = tempfile.mkdtemp(prefix="star")
    fastq1, fastq2 = getFastqs(fastq1Spec, fastq2Spec, tmpDir)

    tmpBam = mkTmpBam(bamFile)  # atomic
    runAlignment(fastq1, fastq2, ncpus, ramGB, genomeDir, tmpDir, tmpBam)
    os.rename(tmpBam, bamFile)
    shutil.rmtree(tmpDir, ignore_errors=True)

def main(args):
    if osp.exists(args.bamFile):
        print("NOTE: BAM already exists, skipping:", args.bamFile, file=sys.stderr)
    else:
        starAlign(args.fastq1, args.fastq2, args.ncpus, args.ramGB,
                  args.genomeDir, args.bamFile)


main(parseArgs())
