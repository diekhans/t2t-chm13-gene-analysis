#!/usr/bin/env python3

import argparse
from collections import defaultdict, namedtuple
from pycbio.sys import fileOps
from pycbio.db import sqliteOps
from geneBoundsLib import geneBoundsAddCmdOpts, geneBoundsProcessCmdOpts, NameColumn, GeneBoundsBed, buildGeneBounds

class BoundsOpts(namedtuple("BoundsOpts",
                            ("nameField", "hgncOnly", "geneTypes",))):
    pass


def parseArgs():
    usage = """Get gene bounds of GENCODE from database  """
    parser = argparse.ArgumentParser(description=usage)
    geneBoundsAddCmdOpts(parser)
    parser.add_argument('--limit', type=int,
                        help="limit for testing")
    parser.add_argument('gencodeDb',
                        help="sqlite DB")
    parser.add_argument('geneBoundsBed',
                        help="BED for each gene bounds")
    opts = parser.parse_args()
    geneBoundsProcessCmdOpts(opts)
    return opts

def buildQuery(gbOpts, limit):
    geneTypeClause = "AND (transcriptType IN {geneTypes})".format(geneTypes=sqliteOps.makeInSeqArg(gbOpts.geneTypes)) if gbOpts.geneTypes is not None else ""
    hgncClause = "AND (symbol IS NOT NULL)" if gbOpts.hgncOnly else ""
    limitClause = "LIMIT {}".format(limit) if limit is not None else ""
    # ignore chrY
    sql = """
    SELECT ann.*, attrs.*, sym.geneId as hgncId, sym.symbol as geneSym
    FROM gencode_ann ann, gencode_attrs attrs
    LEFT JOIN gencode_to_gene_symbol sym on sym.transcriptId = attrs.transcriptId
    WHERE (attrs.transcriptId = ann.name)
       AND (chrom != "chrY")
       {geneTypeClause} {hgncClause} {limitClause}
    """.format(geneTypeClause=geneTypeClause, hgncClause=hgncClause, limitClause=limitClause)
    return sql


def processTrans(rec, nameFld, geneTransBeds):
    name = getattr(rec, nameFld)
    b = GeneBoundsBed.create(rec.chrom, rec.txStart, rec.txEnd, name, strand=rec.strand,
                             geneSym=rec.geneName, hgncId=rec.hgncId, geneIds=rec.geneId, geneType=rec.geneType)
    geneTransBeds[name].append(b)

def loadTrans(gencodeDb, gbOpts, limit):
    "filter bases on parameters"
    if gbOpts.nameField == NameColumn.geneId:
        nameFld = "geneId"
    elif gbOpts.nameField == NameColumn.geneSym:
        nameFld = "geneName"

    geneTransBeds = defaultdict(list)
    conn = sqliteOps.connect(gencodeDb, rowFactory=sqliteOps.objDictRowFactory)
    for rec in sqliteOps.query(conn, buildQuery(gbOpts, limit)):
        processTrans(rec, nameFld, geneTransBeds)
    return geneTransBeds

def main(opts):
    gbOpts = BoundsOpts(nameField=opts.nameField,
                        hgncOnly=opts.hgncOnly,
                        geneTypes=opts.geneType)
    geneTransBeds = loadTrans(opts.gencodeDb, gbOpts, opts.limit)
    with fileOps.opengz(opts.geneBoundsBed, "w") as bedFh:
        buildGeneBounds(geneTransBeds, bedFh)

main(parseArgs())
