#!/usr/bin/env python3

import argparse
import statistics
from pycbio.sys import fileOps
from pycbio.hgdata.bed import BedReader
from geneBoundsLib import GeneBoundsBedReader

def parseArgs():
    usage = """statistics on gene bounds or transscripts """
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('--geneSpan', action="store_true",
                        help="whole bed span ")
    parser.add_argument('srcBed',
                        help="bed12 or bed4+")
    parser.add_argument('mappingsBed',
                        help="bed12 or bed4+")
    parser.add_argument('statsTsv',
                        help="")
    return parser.parse_args()

def mkBedReader(bedFile, geneSpan):
    return GeneBoundsBedReader(bedFile) if geneSpan else BedReader(bedFile)

def getSize(bed, geneSpan):
    if geneSpan:
        return bed.end - bed.start
    else:
        return sum([len(blk) for blk in bed.blocks])

def collectSizes(bedFile, geneSpan):
    sizes = {}
    for bed in mkBedReader(bedFile, geneSpan):
        sizes[bed.name] = getSize(bed, geneSpan)
    return sizes

def collectMappingSizes(srcSizes, mappingsBed, geneSpan):
    # arrays of sizes of each name, so missing will have zero length arrays
    mappingSizes = {n: [] for n in srcSizes.keys()}
    for bed in mkBedReader(mappingsBed, geneSpan):
        mappingSizes[bed.name].append([getSize(bed, geneSpan)])
    return mappingSizes

def fmtVal(v):
    "format if float"
    return ("%0.3g" %  v) if isinstance(v, float) else str(v)

def basicStats(what, vec, fh):
    fileOps.prRowv(fh, "min" + what, fmtVal(min(vec)))
    fileOps.prRowv(fh, "max" + what, fmtVal(max(vec)))
    fileOps.prRowv(fh, "mean" + what, fmtVal(statistics.mean(vec)))
    fileOps.prRowv(fh, "median" + what, fmtVal(statistics.median(vec)))

def numMappingsReport(mappingSizes, fh):
    basicStats("Mappings", [len(c) for c in mappingSizes.values()], fh)

def report(mappingSizes, fh):
    fileOps.prRowv(fh, "statistic", "value")
    numMappingsReport(mappingSizes, fh)

def main(opts):
    srcSizes = collectSizes(opts.srcBed, opts.geneSpan)
    mappingSizes = collectMappingSizes(srcSizes, opts.mappingsBed, opts.geneSpan)
    with fileOps.opengz(opts.statsTsv, "w") as fh:
        report(mappingSizes, fh)

main(parseArgs())
