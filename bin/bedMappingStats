#!/usr/bin/env python3

import argparse
import statistics
from pycbio.sys import fileOps
from pycbio.hgdata.bed import BedReader
from geneBoundsLib import GeneBoundsBedReader

def parseArgs():
    usage = """statistics on gene bounds or transcripts"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('--geneSpan', action="store_true",
                        help="whole bed span ")
    parser.add_argument('srcBed',
                        help="bed12 or bed4+")
    parser.add_argument('mappingsBed',
                        help="bed12 or bed4+")
    parser.add_argument('statsTsv',
                        help="")
    return parser.parse_args()

def mkBedReader(bedFile, geneSpan):
    return GeneBoundsBedReader(bedFile) if geneSpan else BedReader(bedFile)

def getSize(bed, geneSpan):
    if geneSpan:
        return bed.end - bed.start
    else:
        return sum([len(blk) for blk in bed.blocks])

def collectSrcSizes(bedFile, geneSpan):
    sizes = {}
    for bed in mkBedReader(bedFile, geneSpan):
        sizes[bed.name] = getSize(bed, geneSpan)
    return sizes

def collectMappingSizes(srcSizes, mappingsBed, geneSpan):
    mappingSizes = {}
    for bed in mkBedReader(mappingsBed, geneSpan):
        if bed.name not in mappingSizes:
            mappingSizes[bed.name] = []
        mappingSizes[bed.name].append(getSize(bed, geneSpan))
    return mappingSizes

def check(srcSizes, mappingSizes):
    missing = [n for n in mappingSizes.keys() if n not in srcSizes]
    if len(missing) > 0:
        raise Exception("mapped names not in source: {}".format(missing))

def fmtVal(v):
    "format if float"
    return ("%0.3g" % v) if isinstance(v, float) else str(v)

def basicStats(what, vec, fh):
    fileOps.prRowv(fh, "min" + what, fmtVal(min(vec)))
    fileOps.prRowv(fh, "max" + what, fmtVal(max(vec)))
    fileOps.prRowv(fh, "mean" + what, fmtVal(statistics.mean(vec)))
    fileOps.prRowv(fh, "median" + what, fmtVal(statistics.median(vec)))

def numMappingsVec(srcSizes, mappingSizes):
    return [(len(mappingSizes[n]) if n in mappingSizes else 0) for n in srcSizes.keys()]

def maxFracMappedVec(srcSizes, mappingSizes):
    def nameMax(n):
        return max([(msize / srcSizes[n]) for msize in mappingSizes[n]])
    return [nameMax(name) for name in mappingSizes.keys()]

def minFracMappedVec(srcSizes, mappingSizes):
    def nameMin(n):
        return min([(msize / srcSizes[n]) for msize in mappingSizes[n]])
    return [nameMin(name) for name in mappingSizes.keys()]

def report(srcSizes, mappingSizes, fh):
    fileOps.prRowv(fh, "statistic", "value")
    basicStats("Mappings", numMappingsVec(srcSizes, mappingSizes), fh)
    basicStats("MaxCover", maxFracMappedVec(srcSizes, mappingSizes), fh)
    basicStats("MinCover", minFracMappedVec(srcSizes, mappingSizes), fh)


def main(opts):
    srcSizes = collectSrcSizes(opts.srcBed, opts.geneSpan)
    mappingSizes = collectMappingSizes(srcSizes, opts.mappingsBed, opts.geneSpan)
    check(srcSizes, mappingSizes)
    with fileOps.opengz(opts.statsTsv, "w") as fh:
        report(srcSizes, mappingSizes, fh)

main(parseArgs())
