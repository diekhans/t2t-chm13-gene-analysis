#!/usr/bin/env python3

import argparse
from pycbio.sys import fileOps
from pycbio.hgdata.genePred import GenePredReader
from pycbio.hgdata.bed import Bed
from pycbio.hgdata.frame import Frame

def parseArgs():
    usage = """ Collect frameshift a genePred made from a blat alignment

    should use:     mrnaToGene -quiet -genePredExt -cdsFile=mrna.cds.gz -insertMergeSize=0
    """
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('genePred')
    parser.add_argument('resultsBed')
    return parser.parse_args()

def getNextFrame(gp, i):
    return Frame(gp.exons[i].frame) + gp.exons[i].getCds().size()

def scanForFrameShifts(gp, iStart, iEnd, iDir, bedFunc):
    shifts = []
    i = iStart
    while gp.exons[i].frame == -1:
        i += iDir
    nextFrame = getNextFrame(gp, i)
    i += iDir
    while (i < iEnd) and (gp.exons[i].frame != -1):
        frame = Frame(gp.exons[i].frame)
        if frame != nextFrame:
            shifts.append(bedFunc(gp, i))
        nextFrame = getNextFrame(gp, i)
        i += iDir
    return shifts

def findFrameShifts(gp):
    if not gp.hasCds():
        return []
    elif gp.strand == '+':
        return scanForFrameShifts(gp, 0, len(gp.exons), 1,
                                  lambda gp, i: Bed(gp.chrom, gp.exons[i - 1].end, gp.exons[i].start, gp.name, score=0, strand=gp.strand))
    else:
        return scanForFrameShifts(gp, len(gp.exons) - 1, -1, -1,
                                  lambda gp, i: Bed(gp.chrom, gp.exons[i + 1].start, gp.exons[i].end, gp.name, score=0, strand=gp.strand))

def processGp(gp, outFh):
    for bed in findFrameShifts(gp):
        bed.write(outFh)

def main(args):
    with fileOps.opengz(args.resultsBed, 'w') as outFh:
        for gp in GenePredReader(args.genePred):
            processGp(gp, outFh)

main(parseArgs())
