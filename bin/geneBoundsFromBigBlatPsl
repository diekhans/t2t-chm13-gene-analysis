#!/usr/bin/env python3

import argparse
from collections import defaultdict, namedtuple
from pycbio.sys import fileOps
import pyBigWig
from pycbio.hgdata.bed import BedReader
from geneBoundsLib import geneBoundsAddCmdOpts, geneBoundsProcessCmdOpts, NameColumn, GeneBoundsBed, buildGeneBounds

def parseArgs():
    usage = """Get bounds of genes for bigBlatPsl format alignments which have some extra columns."""
    parser = argparse.ArgumentParser(description=usage)
    geneBoundsAddCmdOpts(parser)
    parser.add_argument('--sourceAnnot',
                        help='''BED of source genes for expansion checking and exon counts''')
    parser.add_argument('--maxSourceExpansion', type=float,
                        help='max fraction of size source alignment increase (e.g. 1.5)')
    parser.add_argument('--minExons', type=int,
                        help='minimum number of exons')
    parser.add_argument('bigBlatPsl',
                        help="must follow bigBlatPsl.as")
    parser.add_argument('geneBoundsBed',
                        help="BED for each gene bounds, score field has number to distinguish between multiple mappings of the same gene.")
    opts = parser.parse_args()
    geneBoundsProcessCmdOpts(opts)
    if (opts.maxSourceExpansion is not None) and (opts.sourceAnnot is None):
        parser.error('--maxSourceExpansion requires --sourceAnnot')
    return opts

class BoundsOpts(namedtuple("BoundsOpts",
                            ("nameField", "hgncOnly", "geneTypes", "sourceAnnots",
                             "maxSourceExpansion", "minExons",))):
    pass

# offset by -3 due to being in bigBed
nameColumnIdx = 0
strandColumnIdx = 2
exonCountColumnIdx = 6
geneSymColumnIdx = 22
geneIdColumnIdx = 23
hgncIdColumnIdx = 24
geneTypeColumnIdx = 25

def loadSourceAnnotBed(sourceAnnotBed):
    return {b.name: b for b in BedReader(sourceAnnotBed)}

def isHgnc(v):
    return v not in ("", "NULL")

def checkSourceExpansion(entry, row, sourceRec, maxSourceExpansion):
    srcSize = sourceRec.chromEnd - sourceRec.chromStart
    destSize = entry[1] - entry[0]
    return ((destSize - srcSize) / srcSize) <= maxSourceExpansion

def useAnnot(entry, row, gbOpts):
    if not (((not gbOpts.hgncOnly) or isHgnc(row[hgncIdColumnIdx]))
            and ((gbOpts.geneTypes is None) or (row[geneTypeColumnIdx] in gbOpts.geneTypes))):
        return False
    if gbOpts.sourceAnnots is not None:
        sourceRec = gbOpts.sourceAnnots[row[nameColumnIdx]]
        if (gbOpts.maxSourceExpansion is not None) and not checkSourceExpansion(entry, row, sourceRec, gbOpts.maxSourceExpansion):
            return False
        if (gbOpts.minExons is not None) and (sourceRec.blockCount < gbOpts.minExons):
            return False
    else:
        if (gbOpts.minExons is not None) and (int(row[exonCountColumnIdx]) < gbOpts.minExons):
            return False
    return True

def loadChromTrans(bbpFh, chrom, chromSize, gbOpts, geneTransBeds):
    "filter bases on parameters"

    if gbOpts.nameField == NameColumn.geneId:
        nameIdx = geneIdColumnIdx
    elif gbOpts.nameField == NameColumn.geneSym:
        nameIdx = geneSymColumnIdx
    for entry in bbpFh.entries(chrom, 0, bbpFh.chroms(chrom)):
        row = entry[2].split('\t')
        if useAnnot(entry, row, gbOpts):
            b = GeneBoundsBed(chrom, entry[0], entry[1], row[nameIdx], 0, row[strandColumnIdx],
                              extraCols=(row[geneSymColumnIdx], row[hgncIdColumnIdx], row[geneIdColumnIdx], row[geneTypeColumnIdx],))
            geneTransBeds[row[nameIdx]].append(b)

def loadTrans(bigBlatPsl, opts):
    geneTransBeds = defaultdict(list)
    bbpFh = pyBigWig.open(bigBlatPsl)
    for chrom in sorted(bbpFh.chroms()):
        loadChromTrans(bbpFh, chrom, bbpFh.chroms(chrom), opts, geneTransBeds)
    bbpFh.close()
    return geneTransBeds

def main(opts):
    sourceAnnots = loadSourceAnnotBed(opts.sourceAnnot) if opts.sourceAnnot is not None else None
    gbOpts = BoundsOpts(nameField=opts.nameField,
                        hgncOnly=opts.hgncOnly,
                        geneTypes=opts.geneType,
                        sourceAnnots=sourceAnnots,
                        maxSourceExpansion=opts.maxSourceExpansion,
                        minExons=opts.minExons)
    geneTransBeds = loadTrans(opts.bigBlatPsl, gbOpts)
    with fileOps.opengz(opts.geneBoundsBed, "w") as bedFh:
        buildGeneBounds(geneTransBeds, bedFh)

main(parseArgs())
