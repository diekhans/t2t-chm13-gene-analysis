#!/usr/bin/env python3

import argparse
from collections import defaultdict, namedtuple
from pycbio.sys import fileOps
from pycbio.sys.symEnum import SymEnum
import pyBigWig
from pycbio.hgdata.bed import BedReader
from geneFamilyLib import GeneBoundsBed, buildGeneBounds

class NameColumn(SymEnum):
    geneId = 1
    geneSym = 2

def parseArgs():
    usage = """Get bounds of genes for bigBlatPsl format alignments which have some extra columns."""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('--hgncOnly', action="store_true")
    parser.add_argument('--nameField', choices=(NameColumn.geneId, NameColumn.geneSym),
                        default=NameColumn.geneId, type=NameColumn,
                        help="which column to use for in name and for grouping into genes")
    parser.add_argument('--geneType', action='append',
                        help='type of gene, maybe repeated')
    parser.add_argument('--sourceAnnot',
                        help='''BED of source genes for expansion checking and exon counts''')
    parser.add_argument('--maxSourceExpansion', type=float,
                        help='max fraction of size source alignment increase (e.g. 1.5)')
    parser.add_argument('--minExons', type=int,
                        help='minimum number of exons')
    parser.add_argument('bigBlatPsl',
                        help="must follow bigBlatPsl.as")
    parser.add_argument('geneBoundsBed',
                        help="BED for each gene bounds, score field has number to distinguish between multiple mappings of the same gene.")
    args = parser.parse_args()
    if args.geneType is not None:
        args.geneType = frozenset(args.geneType)
    if (args.maxSourceExpansion is not None) and (args.sourceAnnot is None):
        parser.error('--maxSourceExpansion requires --sourceAnnot')
    if (args.minExons is not None) and (args.sourceAnnot is None):
        parser.error('--minExons requires --sourceAnnot')
    return args

class BoundsOpts(namedtuple("BoundsOpts",
                            ("nameField", "hgncOnly", "geneTypes", "sourceAnnots",
                             "maxSourceExpansion", "minExons",))):
    pass

# offset by -3 due in bigBed
nameColumnIdx = 0
strandColumnIdx = 2
exonCountColumnIdx = 6
geneSymColumnIdx = 22
geneIdColumnIdx = 23
hgncIdColumnIdx = 24
geneTypeColumnIdx = 25

def loadSourceAnnotBed(sourceAnnotBed):
    return {b.name: b for b in BedReader(sourceAnnotBed)}

def isHgnc(v):
    return v not in ("", "NULL")

def checkSourceExpansion(entry, row, sourceRec, maxSourceExpansion):
    srcSize = sourceRec.chromEnd - sourceRec.chromStart
    destSize = entry[1] - entry[0]
    return ((destSize - srcSize) / srcSize) <= maxSourceExpansion

def useAnnot(entry, row, opts):
    if not (((not opts.hgncOnly) or isHgnc(row[hgncIdColumnIdx]))
            and ((opts.geneTypes is None) or (row[geneTypeColumnIdx] in opts.geneTypes))):
        return False
    if opts.sourceAnnots is not None:
        sourceRec = opts.sourceAnnots[row[nameColumnIdx]]
        if (opts.maxSourceExpansion is not None) and not checkSourceExpansion(entry, row, sourceRec, opts.maxSourceExpansion):
            return False
        if (opts.minExons is not None) and (sourceRec.blockCount < opts.minExons):
            return False
    return True

def loadChromTrans(bbpFh, chrom, chromSize, opts, geneTransBeds):
    "filter bases on parameters"

    if opts.nameField == NameColumn.geneId:
        nameIdx = geneIdColumnIdx
    elif opts.nameField == NameColumn.geneSym:
        nameIdx = geneSymColumnIdx
    for entry in bbpFh.entries(chrom, 0, bbpFh.chroms(chrom)):
        row = entry[2].split('\t')
        if useAnnot(entry, row, opts):
            b = GeneBoundsBed(chrom, entry[0], entry[1], row[nameIdx], 0, row[strandColumnIdx],
                              extraCols=(row[geneSymColumnIdx], row[hgncIdColumnIdx], row[geneIdColumnIdx], row[geneTypeColumnIdx],))
            geneTransBeds[row[nameIdx]].append(b)

def loadTrans(bigBlatPsl, opts):
    geneTransBeds = defaultdict(list)
    bbpFh = pyBigWig.open(bigBlatPsl)
    for chrom in sorted(bbpFh.chroms()):
        loadChromTrans(bbpFh, chrom, bbpFh.chroms(chrom), opts, geneTransBeds)
    bbpFh.close()
    return geneTransBeds

def main(args):
    sourceAnnots = loadSourceAnnotBed(args.sourceAnnot) if args.sourceAnnot is not None else None
    opts = BoundsOpts(nameField=args.nameField,
                      hgncOnly=args.hgncOnly,
                      geneTypes=args.geneType,
                      sourceAnnots=sourceAnnots,
                      maxSourceExpansion=args.maxSourceExpansion,
                      minExons=args.minExons)
    geneTransBeds = loadTrans(args.bigBlatPsl, opts)
    with fileOps.opengz(args.geneBoundsBed, "w") as bedFh:
        buildGeneBounds(geneTransBeds, bedFh)

main(parseArgs())
