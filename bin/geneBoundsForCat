#!/usr/bin/env python3

import argparse
from collections import defaultdict, namedtuple
from pycbio.sys import fileOps
from pycbio.hgdata.genePred import GenePredReader
from pycbio.tsv import TsvTable
from geneBoundsLib import geneBoundsAddCmdOpts, geneBoundsProcessCmdOpts, NameColumn, GeneBoundsBed, buildGeneBounds

class BoundsOpts(namedtuple("BoundsOpts",
                            ("nameField", "hgncOnly", "geneTypes",))):
    pass

def parseArgs():
    usage = """Get bounds of genes for CAT gp + gp_info"""
    parser = argparse.ArgumentParser(description=usage)
    geneBoundsAddCmdOpts(parser)
    parser.add_argument('catGenePred',
                        help="gp from cat")
    parser.add_argument('catGenePredInfo',
                        help="associated metadata")
    parser.add_argument('geneBoundsBed',
                        help="BED for each gene bounds, score field has number to distinguish between multiple mappings of the same gene.")
    opts = parser.parse_args()
    geneBoundsProcessCmdOpts(opts)
    return opts

def isHgnc(v):
    return v not in ("", "NULL")

def useAnnot(gp, catMeta, gbOpts):
    if not (((not gbOpts.hgncOnly) or isHgnc(catMeta.hgncId))
            and ((gbOpts.geneTypes is None) or (catMeta.gene_biotype in gbOpts.geneTypes))):
        return False
    return True

def loadGenesMeta(catGpInfo):
    return TsvTable(catGpInfo, uniqKeyCols=("transcript_id",))

def loadTrans(catGp, catMetaTbl, gbOpts):
    "filter bases on parameters"
    geneTransBeds = defaultdict(list)

    if gbOpts.nameField == NameColumn.geneId:
        nameFld = "gene_id"
    elif gbOpts.nameField == NameColumn.geneSym:
        nameFld = "source_gene_common_name"

    for gp in GenePredReader(catGp):
        catMeta = catMetaTbl.idx.transcript_id[gp.name]
        if useAnnot(gp, catMeta, gbOpts):
            b = GeneBoundsBed(gp.chrom, gp.txStart, gp.txEnd, getattr(catMeta, nameFld), 0, gp.strand,
                              extraCols=(catMeta.source_gene_common_name, catMeta.hgnc_id, catMeta.gene_id, catMeta.gene_biotype))
            geneTransBeds[getattr(catMeta, nameFld)].append(b)
    return geneTransBeds

def main(opts):
    gbOpts = BoundsOpts(nameField=opts.nameField,
                        hgncOnly=opts.hgncOnly,
                        geneTypes=opts.geneType)
    catMetaTbl = loadGenesMeta(opts.catGenePredInfo)
    geneTransBeds = loadTrans(opts.catGenePred, catMetaTbl, gbOpts)
    with fileOps.opengz(opts.geneBoundsBed, "w") as bedFh:
        buildGeneBounds(geneTransBeds, bedFh)

main(parseArgs())
