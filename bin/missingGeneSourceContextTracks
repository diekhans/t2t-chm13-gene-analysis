#!/usr/bin/env python3

import argparse
import json
from pycbio.sys import fileOps
from pycbio.sys.objDict import ObjDict
from pycbio.sys.svgcolors import SvgColors
from pycbio.sys.symEnum import SymEnum, auto
from geneBoundsLib import GeneBoundsBed

class RecType(SymEnum):
    CONTEXT = auto()
    PRESENT = auto()
    MISSING_GENES = auto()
    MISSING_RANGES = auto()

def parseArgs():
    usage = """
    generate bed file from missing context data
    """
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('--recType', action='append', dest="recTypes", type=RecType, choices=RecType,
                        help="only these types of BEDS, default is all, maybe repeated")
    parser.add_argument('--labelsTsv',
                        help="")
    parser.add_argument('missingGeneContextJson',
                        help="")
    parser.add_argument('missingGenesBed',
                        help="BED with source of missing genes")
    opts = parser.parse_args()
    if opts.recTypes is None:
        opts.recTypes = frozenset(RecType)
    else:
        opts.recTypes = frozenset(opts.recTypes)
    return opts

CONTEXT_COLOR = SvgColors.lightgoldenrodyellow.toRgb8Str()
PRESENT_COLOR = SvgColors.darkblue.toRgb8Str()
MISSING_GENES_COLOR = SvgColors.darkred.toRgb8Str()
MISSING_RANGE_COLOR = SvgColors.crimson.toRgb8Str()

def getMaxEnd(geneBeds):
    return max([b.chromEnd for b in geneBeds])

def makeRangeBed(chrom, start, end, name, color, bedFh):
    b = GeneBoundsBed.create(chrom, start, end, name, thickStart=start, thickEnd=end)
    b.itemRgb = color
    b.write(bedFh)

def makeArrayBeds(geneBeds, color, bedFh):
    for gb in geneBeds:
        b = GeneBoundsBed.create(**gb)
        b.itemRgb = color
        b.write(bedFh)

def makeContextBed(ctx, recTypes, bedFh, labelsFh):
    if RecType.CONTEXT in recTypes:
        makeRangeBed(ctx.chrom, ctx.chromStart, ctx.chromEnd, ctx.contextId, CONTEXT_COLOR, bedFh)
    if RecType.MISSING_RANGES in recTypes:
        makeRangeBed(ctx.chrom, ctx.missingGenes[0].chromStart, getMaxEnd(ctx.missingGenes), ctx.contextId, MISSING_RANGE_COLOR, bedFh)
    if RecType.PRESENT in recTypes:
        makeArrayBeds(ctx.downstreamGenes, PRESENT_COLOR, bedFh)
        makeArrayBeds(ctx.upstreamGenes, PRESENT_COLOR, bedFh)
    if RecType.MISSING_GENES in recTypes:
        makeArrayBeds(ctx.missingGenes, MISSING_GENES_COLOR, bedFh)

    if labelsFh is not None:
        geneIds = []
        for mg in ctx.missingGenes:
            geneIds.extend(mg.geneIds)
        fileOps.prRowv(labelsFh, ctx.contextId, ctx.contextId,
                       "{}:{}-{}".format(ctx.chrom, ctx.chromStart, ctx.chromEnd),
                       ",".join(geneIds))


def main(opts):
    with fileOps.opengz(opts.missingGeneContextJson) as inFh:
        missingContexts = json.load(inFh, object_pairs_hook=ObjDict)
    if opts.labelsTsv is not None:
        labelsFh = fileOps.opengz(opts.labelsTsv, "w")
        fileOps.prRowv(labelsFh, "id", "name", "location", "genes")
    else:
        labelsFh = None
    with fileOps.opengz(opts.missingGenesBed, 'w') as bedFh:
        for ctx in missingContexts:
            makeContextBed(ctx, opts.recTypes, bedFh, labelsFh)

main(parseArgs())
